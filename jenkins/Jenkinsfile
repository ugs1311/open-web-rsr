def call() {
    def label = "worker-${UUID.randomUUID().toString()}"

    pipeline {
        agent {
            kubernetes {
                yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: worker
spec:
  serviceAccountName: jenkins-agent
  containers:
  - name: python
    image: python:3.9-slim
    command:
    - cat
    tty: true
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1"
  - name: docker
    image: docker:dind
    securityContext:
      privileged: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  - name: kubectl
    image: bitnami/kubectl:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - name: kubeconfig
      mountPath: /root/.kube
  - name: argocd
    image: argoproj/argocd-cli:latest
    command:
    - cat
    tty: true
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: kubeconfig
    secret:
      secretName: kubeconfig-secret
"""
            }
        }

        environment {
            DOCKER_REGISTRY = 'docker.io'
            IMAGE_NAME = 'open-web-rsr'
            IMAGE_TAG = "${BUILD_NUMBER}"
            ARGOCD_SERVER = 'https://your-argocd-server:port'
            GITHUB_CREDS = credentials('github-credentials')
            DOCKER_CREDS = credentials('docker-hub-credentials')
            ARGOCD_CREDS = credentials('argocd-credentials')
        }

        stages {
            stage('Checkout') {
                steps {
                    checkout scm
                }
            }

            stage('Test') {
                steps {
                    container('python') {
                        sh '''
                            python -m pip install --upgrade pip
                            pip install -r requirements.txt
                            python -m pytest tests/ --junitxml=test-results.xml
                        '''
                    }
                }
            }

            stage('Build Docker Image') {
                steps {
                    container('docker') {
                        sh """
                            echo "${DOCKER_CREDS_PSW}" | docker login ${DOCKER_REGISTRY} -u ${DOCKER_CREDS_USR} --password-stdin
                            docker build -t ${DOCKER_REGISTRY}/${DOCKER_CREDS_USR}/${IMAGE_NAME}:${IMAGE_TAG} .
                            docker push ${DOCKER_REGISTRY}/${DOCKER_CREDS_USR}/${IMAGE_NAME}:${IMAGE_TAG}
                        """
                    }
                }
            }

            stage('Update Kubernetes Manifests') {
                steps {
                    container('python') {
                        sh """
                            sed -i 's|image: .*|image: ${DOCKER_REGISTRY}/${DOCKER_CREDS_USR}/${IMAGE_NAME}:${IMAGE_TAG}|' k8s/deployment.yaml
                        """
                    }
                }
            }

            stage('Deploy to Kubernetes') {
                steps {
                    container('kubectl') {
                        sh """
                            kubectl apply -f k8s/
                        """
                    }
                }
            }

            stage('Sync ArgoCD') {
                steps {
                    container('argocd') {
                        sh """
                            argocd login ${ARGOCD_SERVER} --username ${ARGOCD_CREDS_USR} --password ${ARGOCD_CREDS_PSW} --insecure
                            argocd app sync ${IMAGE_NAME}
                            argocd app wait ${IMAGE_NAME}
                        """
                    }
                }
            }
        }

        post {
            always {
                junit 'test-results.xml'
                cleanWs()
            }
            success {
                echo 'Pipeline succeeded!'
            }
            failure {
                echo 'Pipeline failed!'
            }
        }
    }
}

return this
